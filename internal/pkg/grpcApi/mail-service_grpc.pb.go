// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: mail-service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MailingService_ScheduleNotification_FullMethodName = "/grpcApi.MailingService/ScheduleNotification"
	MailingService_CancelNotification_FullMethodName   = "/grpcApi.MailingService/CancelNotification"
)

// MailingServiceClient is the client API for MailingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MailingServiceClient interface {
	ScheduleNotification(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error)
	CancelNotification(ctx context.Context, in *CancelNotificationRequest, opts ...grpc.CallOption) (*CancelNotificationResponse, error)
}

type mailingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMailingServiceClient(cc grpc.ClientConnInterface) MailingServiceClient {
	return &mailingServiceClient{cc}
}

func (c *mailingServiceClient) ScheduleNotification(ctx context.Context, in *ScheduleRequest, opts ...grpc.CallOption) (*ScheduleResponse, error) {
	out := new(ScheduleResponse)
	err := c.cc.Invoke(ctx, MailingService_ScheduleNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mailingServiceClient) CancelNotification(ctx context.Context, in *CancelNotificationRequest, opts ...grpc.CallOption) (*CancelNotificationResponse, error) {
	out := new(CancelNotificationResponse)
	err := c.cc.Invoke(ctx, MailingService_CancelNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MailingServiceServer is the server API for MailingService service.
// All implementations must embed UnimplementedMailingServiceServer
// for forward compatibility
type MailingServiceServer interface {
	ScheduleNotification(context.Context, *ScheduleRequest) (*ScheduleResponse, error)
	CancelNotification(context.Context, *CancelNotificationRequest) (*CancelNotificationResponse, error)
	mustEmbedUnimplementedMailingServiceServer()
}

// UnimplementedMailingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMailingServiceServer struct {
}

func (UnimplementedMailingServiceServer) ScheduleNotification(context.Context, *ScheduleRequest) (*ScheduleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScheduleNotification not implemented")
}
func (UnimplementedMailingServiceServer) CancelNotification(context.Context, *CancelNotificationRequest) (*CancelNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelNotification not implemented")
}
func (UnimplementedMailingServiceServer) mustEmbedUnimplementedMailingServiceServer() {}

// UnsafeMailingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MailingServiceServer will
// result in compilation errors.
type UnsafeMailingServiceServer interface {
	mustEmbedUnimplementedMailingServiceServer()
}

func RegisterMailingServiceServer(s grpc.ServiceRegistrar, srv MailingServiceServer) {
	s.RegisterService(&MailingService_ServiceDesc, srv)
}

func _MailingService_ScheduleNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).ScheduleNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailingService_ScheduleNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).ScheduleNotification(ctx, req.(*ScheduleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MailingService_CancelNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MailingServiceServer).CancelNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MailingService_CancelNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MailingServiceServer).CancelNotification(ctx, req.(*CancelNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MailingService_ServiceDesc is the grpc.ServiceDesc for MailingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MailingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcApi.MailingService",
	HandlerType: (*MailingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScheduleNotification",
			Handler:    _MailingService_ScheduleNotification_Handler,
		},
		{
			MethodName: "CancelNotification",
			Handler:    _MailingService_CancelNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mail-service.proto",
}

const (
	BackendService_GetFullNotificationInfo_FullMethodName  = "/grpcApi.BackendService/GetFullNotificationInfo"
	BackendService_UpdateNotificationStatus_FullMethodName = "/grpcApi.BackendService/UpdateNotificationStatus"
)

// BackendServiceClient is the client API for BackendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendServiceClient interface {
	GetFullNotificationInfo(ctx context.Context, in *NotificationInfoRequest, opts ...grpc.CallOption) (*NotificationInfoResponse, error)
	UpdateNotificationStatus(ctx context.Context, in *UpdateNotificationStatusRequest, opts ...grpc.CallOption) (*UpdateNotificationStatusResponse, error)
}

type backendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendServiceClient(cc grpc.ClientConnInterface) BackendServiceClient {
	return &backendServiceClient{cc}
}

func (c *backendServiceClient) GetFullNotificationInfo(ctx context.Context, in *NotificationInfoRequest, opts ...grpc.CallOption) (*NotificationInfoResponse, error) {
	out := new(NotificationInfoResponse)
	err := c.cc.Invoke(ctx, BackendService_GetFullNotificationInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) UpdateNotificationStatus(ctx context.Context, in *UpdateNotificationStatusRequest, opts ...grpc.CallOption) (*UpdateNotificationStatusResponse, error) {
	out := new(UpdateNotificationStatusResponse)
	err := c.cc.Invoke(ctx, BackendService_UpdateNotificationStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BackendServiceServer is the server API for BackendService service.
// All implementations must embed UnimplementedBackendServiceServer
// for forward compatibility
type BackendServiceServer interface {
	GetFullNotificationInfo(context.Context, *NotificationInfoRequest) (*NotificationInfoResponse, error)
	UpdateNotificationStatus(context.Context, *UpdateNotificationStatusRequest) (*UpdateNotificationStatusResponse, error)
	mustEmbedUnimplementedBackendServiceServer()
}

// UnimplementedBackendServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBackendServiceServer struct {
}

func (UnimplementedBackendServiceServer) GetFullNotificationInfo(context.Context, *NotificationInfoRequest) (*NotificationInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullNotificationInfo not implemented")
}
func (UnimplementedBackendServiceServer) UpdateNotificationStatus(context.Context, *UpdateNotificationStatusRequest) (*UpdateNotificationStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateNotificationStatus not implemented")
}
func (UnimplementedBackendServiceServer) mustEmbedUnimplementedBackendServiceServer() {}

// UnsafeBackendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServiceServer will
// result in compilation errors.
type UnsafeBackendServiceServer interface {
	mustEmbedUnimplementedBackendServiceServer()
}

func RegisterBackendServiceServer(s grpc.ServiceRegistrar, srv BackendServiceServer) {
	s.RegisterService(&BackendService_ServiceDesc, srv)
}

func _BackendService_GetFullNotificationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotificationInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).GetFullNotificationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_GetFullNotificationInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).GetFullNotificationInfo(ctx, req.(*NotificationInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_UpdateNotificationStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNotificationStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).UpdateNotificationStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BackendService_UpdateNotificationStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).UpdateNotificationStatus(ctx, req.(*UpdateNotificationStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BackendService_ServiceDesc is the grpc.ServiceDesc for BackendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpcApi.BackendService",
	HandlerType: (*BackendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFullNotificationInfo",
			Handler:    _BackendService_GetFullNotificationInfo_Handler,
		},
		{
			MethodName: "UpdateNotificationStatus",
			Handler:    _BackendService_UpdateNotificationStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mail-service.proto",
}
